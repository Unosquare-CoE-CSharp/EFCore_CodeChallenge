// <auto-generated />
using EFChallenge.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFChallenge.Data.Migrations
{
    [DbContext(typeof(EFChallengeContext))]
    [Migration("20220709181937_AddDatasTablesCompanies")]
    partial class AddDatasTablesCompanies
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EFChallenge.Data.Models.Company.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Line2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ZipPostalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("CountyId");

                    b.ToTable("Address", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressTypeId = 2,
                            City = "Portland",
                            CountyId = 1,
                            Line1 = "4800 Meadows Road, Suite 300 Lake Oswego",
                            ZipPostalCode = "97035"
                        },
                        new
                        {
                            Id = 2,
                            AddressTypeId = 1,
                            City = "Guadalajara",
                            CountyId = 2,
                            Line1 = "Av. de las Américas 1536, Country Club",
                            ZipPostalCode = "44637"
                        });
                });

            modelBuilder.Entity("EFChallenge.Data.Models.Company.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AddreessType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Phsycal Address"
                        },
                        new
                        {
                            Id = 2,
                            Name = "IRS Address"
                        });
                });

            modelBuilder.Entity("EFChallenge.Data.Models.Company.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Unosquare"
                        });
                });

            modelBuilder.Entity("EFChallenge.Data.Models.Company.CompanyAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("CompanyAddress", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            CompanyId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            CompanyId = 1
                        });
                });

            modelBuilder.Entity("EFChallenge.Data.Models.Company.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "USA"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mexico"
                        });
                });

            modelBuilder.Entity("EFChallenge.Data.Models.Company.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("County", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Washington",
                            StateId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Guadalajara",
                            StateId = 2
                        });
                });

            modelBuilder.Entity("EFChallenge.Data.Models.Company.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Oregon"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            Name = "Jalisco"
                        });
                });

            modelBuilder.Entity("EFChallenge.Data.Models.Company.Address", b =>
                {
                    b.HasOne("EFChallenge.Data.Models.Company.AddressType", "AddressType")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFChallenge.Data.Models.Company.County", "County")
                        .WithMany("Addresses")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("County");
                });

            modelBuilder.Entity("EFChallenge.Data.Models.Company.CompanyAddress", b =>
                {
                    b.HasOne("EFChallenge.Data.Models.Company.Address", "Address")
                        .WithOne("CompanyAddress")
                        .HasForeignKey("EFChallenge.Data.Models.Company.CompanyAddress", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFChallenge.Data.Models.Company.Company", "Company")
                        .WithOne("CompanyAddress")
                        .HasForeignKey("EFChallenge.Data.Models.Company.CompanyAddress", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("EFChallenge.Data.Models.Company.County", b =>
                {
                    b.HasOne("EFChallenge.Data.Models.Company.State", "State")
                        .WithMany("Counties")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("EFChallenge.Data.Models.Company.State", b =>
                {
                    b.HasOne("EFChallenge.Data.Models.Company.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("EFChallenge.Data.Models.Company.Address", b =>
                {
                    b.Navigation("CompanyAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("EFChallenge.Data.Models.Company.AddressType", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("EFChallenge.Data.Models.Company.Company", b =>
                {
                    b.Navigation("CompanyAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("EFChallenge.Data.Models.Company.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("EFChallenge.Data.Models.Company.County", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("EFChallenge.Data.Models.Company.State", b =>
                {
                    b.Navigation("Counties");
                });
#pragma warning restore 612, 618
        }
    }
}
